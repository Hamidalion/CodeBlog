using System;
using System.IO;

namespace Metanit_Finalise_Disposable
{
    public class Person
    {
        public string Name { get; set; }

        // Деструктор в отличие от конструктора не может иметь модификаторов доступа.
        // В данном случае в деструкторе в целях демонстрации просто вызывается звуковой сигнал и выводится строка на консоль,
        // но в реальных программах в деструктор вкладывается логика освобождения неуправляемых ресурсов.
        ~Person()
        {
            Console.Beep();
            Console.WriteLine("Disposed");
        }


        // Однако на деле при очистке сборщик мусора вызывает не деструктор,
        // а метод Finalize класса Person. Все потому, что компилятор C# компилирует деструктор в конструкцию, 
        // которая эквивалентна следующей:
        //protected override void Finalize()
        //{
        //    try
        //    {
        //        // здесь идут инструкции деструктора
        //    }
        //    finally
        //    {
        //        base.Finalize();
        //    }
        //}

        // Метод Finalize уже определен в базовом для всех типов классе Object, 
        // однако данный метод нельзя так просто переопределить. 
        // И фактическая его реализация происходит через создание деструктора.

    }
}
